using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using ePF.portal.Entities;
using ePF.portal.Models;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Cors;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ePF.portal.Controllers
{
    [Route("api/[controller]/[action]")]
    [EnableCors("CorsPolicy")]
    public class AccountController : Controller
    {

        private readonly UserManager<Users> _userManager;
        private readonly SignInManager<Users> _signInManager;
        // private readonly IEmailSender _emailSender;
        //private readonly IUserStore<Users> _appUserStore;
        //private readonly AppUserManager1 _appUserManager1;

        readonly IConfiguration _configuration;



        public AccountController(UserManager<Users> userManager,
             SignInManager<Users> signInManager,
        //IEmailSender emailSender
        //IUserStore<Users> appUserStore
            //AppUserManager1 appUserManager1,
            IConfiguration configuration

            )
        {
            _userManager = userManager;
            _signInManager = signInManager;
            // _emailSender = emailSender;
            //_appUserStore = appUserStore;
            //_appUserManager1 = appUserManager1;
           _configuration = configuration;

        }


        [HttpPost]
        public async Task<ResultVM> Login([FromBody] LoginVM model)
        {

            if (ModelState.IsValid)
            {
                var user = await _userManager.FindByNameAsync(model.UserName);
                // var user = await _appUserManager1.FindByNameAsync(model.UserName);

                if (user != null)
                {
                    var result = new ResultVM();



                    //using (SHA1 sha256Hash = SHA1.Create())
                    //{
                    //    // ComputeHash - returns byte array  
                    //    byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(model.Password));



                    //    // Convert byte array to a string   
                    //    StringBuilder hex = new StringBuilder(bytes.Length * 2);
                    //    foreach (byte b in bytes)
                    //        hex.AppendFormat("{0:x2}", b);
                    //    var res = hex.ToString();


                    //}

                    //var res1 = _userManager.PasswordHasher.HashPassword(user, model.Password);


                    if (await _userManager.CheckPasswordAsync(user, model.Password))
                    {
                        // Rule #1
                        //if (!await _signInManager.CanSignInAsync(user))
                        //{
                        //    result.Status = Status.Error;
                        //    result.Data = "<li>Email confirmation required</li>";

                        //    return result;
                        //}

                        var signInResult = await _signInManager.PasswordSignInAsync(model.UserName, model.Password, true,
                            lockoutOnFailure: false);

                        if (signInResult.RequiresTwoFactor)
                        {
                            result.Status = Status.Success;
                            result.Message = "Enter the code generated by your authenticator app";
                            result.Data = new { requires2FA = true };
                            return result;
                        }

                        result.Status = signInResult == Microsoft.AspNetCore.Identity.SignInResult.Success ? Status.Success : Status.Error;
                        result.Message = signInResult == Microsoft.AspNetCore.Identity.SignInResult.Success ? $"Welcome {user.UserName}" : "Invalid login";
                        result.Data = signInResult == Microsoft.AspNetCore.Identity.SignInResult.Success ? (object)model : $"<li>Invalid login attempt - {signInResult}</li>";
                        //result.AccessToken = signInResult == Microsoft.AspNetCore.Identity.SignInResult.Success ? GetAccessToken():"Invalid Access Token";

                        return result;
                    }

                    result.Status = Status.Error;
                    result.Data = $"<li>Invalid Username or Password</li>";

                    return result;
                }

                return new ResultVM
                {
                    Status = Status.Error,
                    Message = "Invalid data",
                    Data = "<li>Invalid Username or Password</li>"
                };
            }

            var errors = ModelState.Keys.Select(e => "<li>" + e + "</li>");
            return new ResultVM
            {
                Status = Status.Error,
                Message = "Invalid data",
                Data = string.Join("", errors)
            };
        }


        private string GetAccessToken()
        {
            var res = AuthenticationHttpContextExtensions.GetTokenAsync(HttpContext, "access_token").Result;
            return res;
        }

        [HttpPost]
        public async Task<IActionResult> Login1([FromBody] LoginVM model)
        {

            var user = await _userManager.FindByNameAsync(model.UserName);

            //var res = Environment.GetEnvironmentVariable("JWT_KEY");

            if (user != null)
            {
                if (await _userManager.CheckPasswordAsync(user, model.Password))
                {
                    return CreateToken(model);
                }
            }

            return BadRequest("Could not create token");
        }

        [HttpPost]
        [Route("token")]
        private IActionResult CreateToken([FromBody]LoginVM loginModel)
        {
            if (ModelState.IsValid)
            {
                var loginResult = _signInManager.PasswordSignInAsync(loginModel.UserName, loginModel.Password, isPersistent: false, lockoutOnFailure: false).Result;

                if (!loginResult.Succeeded)
                {
                    return BadRequest();
                }

                var user = _userManager.FindByNameAsync(loginModel.UserName).Result;

                return Ok(GetToken(user));
            }
            return BadRequest(ModelState);
        }

        private String GetToken(Users user)
        {
            var utcNow = DateTime.UtcNow;

            var claims = new Claim[]
            {
                        new Claim(JwtRegisteredClaimNames.Sub, user.UserId.ToString()),
                        new Claim(JwtRegisteredClaimNames.UniqueName, user.UserName),
                        new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
                        new Claim(JwtRegisteredClaimNames.Iat, utcNow.ToString())
            };

            var signingKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(this._configuration.GetValue<String>("Tokens:Key")));
            var signingCredentials = new SigningCredentials(signingKey, SecurityAlgorithms.HmacSha256);
            var jwt = new JwtSecurityToken(
                signingCredentials: signingCredentials,
                //claims: claims,
                notBefore: utcNow,
                expires: new DateTimeOffset(DateTime.Now.AddDays(1)).DateTime
                //audience: this._configuration.GetValue<String>("Tokens:Audience"),
                //issuer: this._configuration.GetValue<String>("Tokens:Issuer")
                );


            return JsonConvert.SerializeObject(
           jwt.SigningCredentials, Formatting.Indented,
           new JsonConverter[] { new StringEnumConverter() });
        }

        //[HttpGet]
        //[Authorize]
        //public async Task<ePT1.ViewModels.UserClaims> Claims()
        //{
        //    var loggedInUser = await _userManager.GetUserAsync(User);
        //    var userClaims = await _userManager.GetClaimsAsync(loggedInUser);
        //    var claims = userClaims.Union(User.Claims)
        //        .GroupBy(c => c.Type)
        //        .Select(c => new ClaimVM
        //        {
        //            Type = c.First().Type,
        //            Value = c.First().Value
        //        });

        //    return new ePT1.ViewModels.UserClaims
        //    {
        //        UserName = User.Identity.Name,
        //        Claims = claims
        //    };
        //}

        [HttpGet]
        public async Task<IActionResult> Authenticated()
        {
            return Ok(new
            {
                User.Identity.IsAuthenticated,
                Username = User.Identity.IsAuthenticated ? User.Identity.Name : string.Empty,
                AuthenticationMethod = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.AuthenticationMethod)?.Value,
                DisplaySetPassword = User.Identity.IsAuthenticated
                                     && !(await _userManager.HasPasswordAsync(
                                         (await _userManager.GetUserAsync(User))
                                         ))
            });
        }

        [HttpGet]
        [Route("/account/confirmemail")]
        public async Task<IActionResult> ConfirmEmail(string userId, string code)
        {
            var user = await _userManager.FindByIdAsync(userId);

            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{userId}'.");
            }

            var result = await _userManager.ConfirmEmailAsync(user, code);

            if (result.Succeeded)
            {
                await _signInManager.SignInAsync(user, false);
            }

            var message = !result.Succeeded ? $"Error confirming email for user with ID '{userId}':" : "Confirmation succeeded";

            return new LocalRedirectResult($"/?message={message}&type={(result.Succeeded ? "success" : "danger")}");
        }


        [HttpGet]
        [Route("/account/ConfirmExternalProvider")]
        public async Task<IActionResult> ConfirmExternalProvider(string userId, string code,
            string loginProvider, string providerDisplayName, string providerKey)
        {
            var user = await _userManager.FindByIdAsync(userId);

            // This comes from an external provider so we can confirm the email as well
            var confirmationResult = await _userManager.ConfirmEmailAsync(user, code);
            if (!confirmationResult.Succeeded)
                return new LocalRedirectResult($"/?message={providerDisplayName} failed to associate&type=danger");

            var newLoginResult = await _userManager.AddLoginAsync(user,
                new ExternalLoginInfo(null, loginProvider, providerKey,
                    providerDisplayName));

            if (!newLoginResult.Succeeded)
                return new LocalRedirectResult($"/?message={providerDisplayName} failed to associate&type=danger");

            var result = await _signInManager.ExternalLoginSignInAsync(loginProvider, providerKey,
                isPersistent: false, bypassTwoFactor: true);
            return new LocalRedirectResult($"/?message={providerDisplayName} has been added successfully");
        }

        //[HttpPost]
        ////[Authorize]
        //public async Task<ResultVM> ManagePassword([FromBody] UpdatePasswordVM updatePassword)
        //{
        //    if (ModelState.IsValid)
        //    {

        //        var user = await _userManager.GetUserAsync(User);
        //        //var user = _appUserManager1.GetUserByEmail(updatePassword.Email);

        //        // This will set the password only if it's NULL
        //        var result = _appUserManager1.UpdatePassword(user, updatePassword.Password);

        //        if (result.Succeeded)
        //        {
        //            return new ResultVM
        //            {
        //                Status = Status.Success,
        //                Message = "Password has been updated successfully"
        //            };
        //        }

        //        var errors = result.Errors.Select(e => e.Description).Select(e => "<li>" + e + "</li>");

        //        return new ResultVM
        //        {
        //            Status = Status.Error,
        //            Message = "Invalid data",
        //            Data = string.Join("", errors)
        //        };
        //    }
        //    else
        //    {
        //        var errors = ModelState.Keys.Select(e => "<li>" + e + "</li>");
        //        return new ResultVM
        //        {
        //            Status = Status.Error,
        //            Message = "Invalid data",
        //            Data = string.Join("", errors)
        //        };
        //    }
        //}

        [HttpPost]
        public async Task SignOut()
        {
            await _signInManager.SignOutAsync();
        }
    }
}